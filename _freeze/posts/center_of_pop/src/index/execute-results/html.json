{
  "hash": "bc5a999186edbb1d02025836707407f4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Centers of Population by Race/Ethnicity\"\nauthor: \"Harrison DeFord (hdeford1 at umbc dot edu)\"\ndate: \"October 24, 2024\"\noutput: html_document\nexecute:\n  eval: false\n---\n\n\n\nEvery decennial census, the U.S. Census Bureau releases an updated version of the [Mean Center of Population](https://www.census.gov/geographies/reference-files/time-series/geo/centers-population.html), which can be interpreted as the \"center of gravity\" of the U.S. population. The goal of this project is to calculate the mean center of population *per ethnic group* captured in the decennial census.\n\nFor simplification, the groups of interest in this analysis are:\n\n| Group | Census Sub-groups |\n|-----------------------------|-------------------------------------------|\n| Hispanic | \"Hispanic or Latino\" |\n| NH White | \"Not Hispanic or Latino; White alone\" |\n| NH African-American | \"Not Hispanic or Latino; Black or African-American alone\" |\n| NH American and Alaskan Native | \"Not Hispanic or Latino; American Indian and Alaska Native alone\" |\n| NH Asian | \"Not Hispanic or Latino; Asian alone\" |\n| NH Hawaiian and Pacific Islander | \"Not Hispanic or Latino; Native Hawaiian and Other Pacific Islander alone\" |\n| NH Other | \"Not Hispanic or Latino; Some Other Race alone\" |\n| NH Two or more | \"Not Hispanic or Latino; Two or more races\" |\n\n: {.striped .hover}\n\n# Libraries\n\nFirst, we'll load required libraries:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(tigris)\nlibrary(sf)\nlibrary(tmap)\nlibrary(tmaptools)\nlibrary(showtext)\nlibrary(furrr)\nlibrary(data.table)\nlibrary(dtplyr)\noptions(tigris_use_cache = TRUE)\noptions(scipen = 999)\nextrafont::loadfonts(device = \"win\", quiet = T)\n\nrm(list = ls())\nyr = 2010\n```\n:::\n\n\n\n# Parallelization\n\nSince we're computing at the block level (11 million blocks) across 7 groups, we'll have a dataframe with over 70 million rows at its highest. I actually had to upgrade to 32GB of memory to run this analysis: we're going to create a `{furrr}` multisession using all but one of our CPU threads. In my case, that's 11 threads.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips_list <- unique(fips_codes$state)[1:51]\nnum_cores <- availableCores()-1\nplan(multisession, workers = num_cores)\n```\n:::\n\n\n\nNow that our multisession is planned, we can start gathering our census data. The `{tidycensus}` package provides a fantastic interface to the USCB API, but at the block level we can only collect data one state at a time. However, by using `future_map()` to iterate over our list of state FIPS codes (`fips_list`) created earlier, we can gather 11 states worth of data simultaneously until we've obtained population counts for all 50 states, then `reduce()` them into one very long dataframe.\n\n# Census Data Collection\n\nNote that we gather tabular data (`b`) and spatial data (`c`) separately, to be stored in two different files on our machine. This code block takes my machine 20-30 minutes to run -- luckily, once you've run it once, you shouldn't have to run it again thanks to the power of `fwrite()`!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Not run:\n\nif (yr < 2020){\n  pop_vars <- c(white = \"P005003\",\n                black = \"P005004\",\n                aian = \"P005005\",\n                asian = \"P005006\",\n                hipi = \"P005007\",\n                other = \"P005008\",\n                two_p = \"P005009\",\n                hisp = \"P005010\")\n} else {\n  pop_vars <- c(white = \"P2_005N\",\n                black = \"P2_006N\",\n                aian = \"P2_007N\",\n                asian = \"P2_008N\",\n                hipi = \"P2_009N\",\n                other = \"P2_010N\",\n                two_p = \"P2_011N\",\n                hisp = \"P2_002N\")\n}\n\nb <- reduce(future_map(fips_list, function(x){\n  get_decennial(geography = \"block\", \n                           variables = pop_vars,\n                           year = yr,\n                           state = x,\n                           output = \"tidy\",\n                           geometry = FALSE)}, .progress = TRUE), rbind)\n\nc <- reduce(future_map(fips_list, function(x){blocks(state = x, year = yr) %>%\n     st_drop_geometry() %>%\n     mutate(across(.cols = starts_with(\"INTPTLON\"), .fns = as.numeric, .names = \"lon\")) %>%\n     mutate(across(.cols = starts_with(\"INTPTLAT\"), .fns = as.numeric, .names = \"lat\")) %>%\n     select(c(5,last_col(offset = 1), last_col()))}, .progress = TRUE), rbind)\n\nfuture:::ClusterRegistry(\"stop\")\n\nfwrite(as.data.table(b), paste0(\"../data/pop_data_\", yr, \".csv\"))\nfwrite(as.data.table(c), paste0(\"../data/latlon_\", yr, \".csv\"))\n\n## End(Not run)\n```\n:::\n\n\n\n# Calculations\n\nNow, we need to join our tables in order to weight the internal point of each block with its respective population. Note the usage of `{dtplyr}` here: I wanted to keep writing in tidyverse syntax while gaining the performance of `{data.table}`. What a fantastic package!\n\nThe formula used is derived from [this document](https://www2.census.gov/geo/pdfs/reference/cenpop2020/COP2020_documentation.pdf). Since block-level population centers aren't available through `{tigris}`, we will use the \"internal point\" latitude and longitude. The internal point of a geography is often the centroid: if a geography is shaped such that the centroid would fall outside its boundary, the internal point is placed as close to the internal centroid of the geography as possible, preferably on land.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- lazy_dt(fread(paste0(\"../data/pop_data_\", yr, \".csv\")))\nc <- lazy_dt(fread(paste0(\"../data/latlon_\", yr, \".csv\")))\no <- b %>%\n  pivot_wider(names_from = variable, values_from = value) %>%\n  mutate(other = other + two_p) %>%\n  select(-c(two_p)) %>%\n  pivot_longer(cols = 3:9, names_to = \"variable\")\n\nj <- left_join(o, c, by = c(\"GEOID\" = paste0(\"GEOID\", str_sub(yr, 3,4)))) %>%\n  mutate(elat = value * lat,\n         elon = value * lon * cos(lat * (pi/180)),\n         denom = value*cos(lat * (pi/180)))\n\n\ng <- j %>% \n  group_by(variable) %>%\n  summarize(tlat = sum(elat, na.rm = TRUE)/sum(value, na.rm = TRUE),\n            tlon = sum(elon, na.rm = TRUE)/sum(denom, na.rm = TRUE),\n            pop = sum(value))\n\ncc <- as.data.table(j) %>%\n  summarize(tlat = sum(elat, na.rm = TRUE)/sum(value, na.rm = TRUE),\n            tlon = sum(elon, na.rm = TRUE)/sum(denom, na.rm = TRUE),\n            pop = sum(value))\n\ng <- as.data.table(g)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- g %>%\n  st_as_sf(coords = c(\"tlon\",\"tlat\")) %>% st_set_crs(4326) %>% st_transform(6350)\n\ncc <- cc %>%\n  st_as_sf(coords = c(\"tlon\", \"tlat\")) %>% st_set_crs(4326) %>% st_transform(6350)\n\nlso <- vector(mode = 'list', length = nrow(s))\n\nfor (row in 1:nrow(s)){\n  cs <- data.frame(st_coordinates(cc)[1], st_coordinates(cc)[2]) %>%\n  rename(p_x = 1,\n         p_y = 2) %>%\n  mutate(seq = 1)\n  cs <- cbind(g[,c(1,4)],cs)\n  \n  ss <- s[row,] %>%\n    rowwise() %>%\n    mutate(p_x = unlist(geometry)[1],\n           p_y = unlist(geometry)[2]) %>%\n    mutate(seq = 2) %>%\n    st_drop_geometry() %>%\n    ungroup()\n  \n  ap <- rbind(ss,cs[row,]) %>%\n    arrange(variable, seq)\n  \n  m <- as.matrix(ap[order(ap$seq),\n                    c(\"p_x\",\"p_y\")])\n  \n  ls <- st_linestring(m) %>%\n    st_sfc() %>%\n    st_sf() %>%\n    mutate(variable = ap$variable[1],\n           pop = ap$pop[1]) %>%\n    bind_cols()\n  \n  lso <- lso %>% bind_rows(ls)\n}\n\nlsp <- lso %>% st_set_crs(6350)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- s %>% mutate(pop_pct = pop/sum(pop),\n                  log_pct = abs(log(pop_pct)),\n                  normalized_log_pct = 0.1 + (log_pct - max(log_pct)) / (min(log_pct) - max(log_pct)) * (0.7 - 0.1))\n\nplot(lsp[\"variable\"])\n```\n:::\n\n\n\n# Plotting\n\nFinally, all we have to do is plot our points! While I don't have them sized relative to their populations, it would be very easy to do: all I'd have to do is replace the numeric value in `tm_symbols()` with the column name I wanted to graduate on.\n\n\n\n::: {.cell width='8' height='5' units='in'}\n\n```{.r .cell-code}\nilh <- palette(c(rgb(114,153,67, maxColorValue = 255),\n                 rgb(148,79,161, maxColorValue = 255),\n                 rgb(76,196,144, maxColorValue = 255),\n                 rgb(185,74,115, maxColorValue = 255),\n                 rgb(193,158,60, maxColorValue = 255),\n                 rgb(104,123,210, maxColorValue = 255),\n                 rgb(185,85,61, maxColorValue = 255)))\n\nplot_fips <- unique(fips_codes$state_code)[1:51]\nplot_fips <- plot_fips[!plot_fips %in% c(\"02\", \"15\", \"72\", \"78\")]\n\nus <- states(cb = TRUE, year = yr) %>% filter(if (yr == 2010) STATE %in% plot_fips else\n                                                 STATEFP %in% plot_fips) %>%\n  st_transform(6350) #weird artifact in tigris means that column names don't match\n\nt <- tm_shape(us, bbox = bb(us, ext = 1.1))+\n  tm_polygons(border.col = \"#aaaaaa\", lwd = 0.75, col = \"#5b5b5b\")+\n  tm_shape(lsp)+\n  tm_lines(col = \"variable\", palette = ilh, legend.col.show = FALSE, lwd = 1.5, legend.lwd.show = FALSE)+\n  tm_shape(s)+\n  tm_symbols(col = \"variable\", title.col = \"Race/Ethnicity\", size = \"normalized_log_pct\", border.col = \"#bdbdbd\", palette = ilh, border.lwd = 1, legend.col.show = FALSE, legend.size.show = FALSE)+\n  tm_shape(cc)+\n  tm_dots(col = \"#1286c4\", shape = 24, title = \"Total center of population\", size = 0.6, legend.show = FALSE, border.lwd = 1, border.col = \"#bdbdbd\")+\n  tm_add_legend(type = \"symbol\", \n    labels = c(\"American/Alaskan Native\", \"Asian\", \"African-American\", \"Hawaiian/Pacific Islander\", \"Hispanic\", \"Other/Two or more\", \"White\"),\n    col = ilh,\n    border.col = \"#bdbdbd\",\n    title = \"Ethnicity\",\n    size = 0.4)+\n  tm_add_legend(type = \"symbol\",\n                shape = 24,\n                col = \"#1286c4\",\n                size = 0.6,\n                border.col = \"#bdbdbd\",\n                labels = \"Total center of population\")+\n  tm_layout(main.title = \"Center of population by race/ethnicity\",\n            main.title.fontfamily = \"Manrope\",\n            main.title.fontface = 2,\n            main.title.size = 2,\n            bg.color = \"#3b3b3b\",\n            legend.outside = TRUE,\n            legend.text.color = \"#bdbdbd\", \n            legend.text.fontfamily = \"Manrope\", \n            legend.title.color = \"#bdbdbd\",\n            legend.title.fontface = 2,\n            legend.title.size = 1.5,\n            legend.title.fontfamily = \"Manrope\", \n            legend.text.size = 0.75,\n            legend.position = c(0,0.25),\n            outer.bg.color = \"#3b3b3b\",\n            frame = FALSE,\n            main.title.color = \"#bdbdbd\")+\n  tm_credits(paste0(\"Decennial census data, \", yr, \"\\nGraphic by Harrison DeFord (@oonuttlet)\"),\n             position = c(0,0.08),\n             col = \"#bdbdbd\",\n             fontfamily = \"Open Sans\",\n             size = 0.62)\n\nt\n\nif (!file.exists(paste0(\"../bin/center_of_pop_natl_\",yr,\"_intpt.png\"))){\n  tmap_save(t, paste0(\"../bin/center_of_pop_natl_\",yr,\"_intpt.png\"), dpi = 1200)\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}